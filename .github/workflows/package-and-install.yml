# .github/workflows/package-and-install.yml
name: Package and Install
on:
  workflow_dispatch
  # workflow_run:
  #   workflows: ["Gather Release Tags"]
  #   types: [completed]

permissions:
  contents: write

jobs:
  package-and-install:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: staging # Specify the environment
    runs-on: ubuntu-latest
    env:
      DEVHUB_AUTH_URL: ${{ secrets.DEVHUB_AUTH_URL }} # Repository secret
      SF_ORG_AUTH_URL: ${{ secrets.SF_ORG_URL }} # Environment secret
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CURRENT_ENV: ${{ github.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up sf CLI
        uses: patrykacc/sf-cli-setup@v1.1.0
        with:
          version: latest

      - name: Authenticate to Dev Hub
        run: |
          echo "$DEVHUB_AUTH_URL" > devhub.authurl
          sf org login sfdx-url -f devhub.authurl -a DevHub --set-default-dev-hub
          rm devhub.authurl

      - name: Authenticate to Environment Org
        run: |
          # Debug environment name
          CURRENT_ENV="${{ github.environment }}"
          echo "Current environment: ${CURRENT_ENV:-staging}"

          # Set environment name with explicit fallback
          ENV_NAME="${CURRENT_ENV:-staging}"
          echo "Using environment: ${ENV_NAME}"

          # Authenticate
          echo "$SF_ORG_AUTH_URL" > env.authurl
          sf org login sfdx-url -f env.authurl -a "${ENV_NAME}" --set-default
          rm env.authurl

          # Debug JSON structure
          echo "JSON structure:"
          sf org list --json | jq '.'

          # List org details with corrected query
          echo "Environment org details:"
          sf org list --json | jq -r --arg env "$ENV_NAME" '
            .result.nonScratchOrgs[] | 
            select(.alias == $env) | 
            "Username: \(.username)\nOrg ID: \(.orgId)\nAlias: \(.alias)"
          '

      - name: Get latest prerelease tag
        id: get-rc
        run: |
          LATEST_RC=$(gh api /repos/${{ github.repository }}/releases \
            --jq 'map(select(.prerelease))|sort_by(.created_at)|reverse|.[0].tag_name')
          echo "LATEST_RC=$LATEST_RC" >> $GITHUB_ENV

      - name: Create beta package version
        id: pkg
        run: |
          echo "Latest RC tag: ${{ env.LATEST_RC }}"

          # Get package ID first
          PACKAGE_ID=$(sf package list --json | jq -r '.result[] | select(.name=="MyPackage") | .Id')
          echo "Package ID: ${PACKAGE_ID}"

          # Create version with full debug
          echo "Creating package version..."
          CREATION_RESULT=$(sf package version create \
            --package "${PACKAGE_ID}@${{ env.LATEST_RC }}" \
            --installation-key-bypass \
            --wait 10 \
            --json)

          echo "Creation result: ${CREATION_RESULT}"

          VERSION_ID=$(echo "${CREATION_RESULT}" | jq -r '.result.SubscriberPackageVersionId')

          if [ -z "$VERSION_ID" ] || [ "$VERSION_ID" = "null" ]; then
            echo "Error: Failed to get package version ID"
            echo "Full response:"
            echo "${CREATION_RESULT}" | jq '.'
            exit 1
          fi

          echo "Created package version: $VERSION_ID"
          echo "VERSION_ID=${VERSION_ID}" >> $GITHUB_ENV

      - name: Promote package version
        if: env.VERSION_ID != '' && env.VERSION_ID != 'null'
        run: |
          if [ -z "$VERSION_ID" ] || [ "$VERSION_ID" = "null" ]; then
            echo "Error: Invalid package version ID"
            exit 1
          fi

          echo "Promoting package version: ${{ env.VERSION_ID }}"
          sf package version promote \
            --package "${{ env.VERSION_ID }}" \
            --no-prompt \
            --json | jq '.'

      - name: Install package into target org
        run: |
          sf package install \
            --package ${{ env.VERSION_ID }} \
            --target-org ${{ github.environment }} \
            --wait 10

      - name: Run Apex tests
        run: |
          sf apex run test --target-org ${{ github.environment }}
