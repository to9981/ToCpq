# .github/workflows/package-and-install.yml
name: Package and Install
on:
  workflow_run:
    workflows: ["Gather Release Tags"]
    types: [completed]

permissions:
  contents: write

jobs:
  package-and-install:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: staging # Specify the environment
    runs-on: ubuntu-latest
    env:
      DEVHUB_AUTH_URL: ${{ secrets.DEVHUB_AUTH_URL }} # Repository secret
      SF_ORG_AUTH_URL: ${{ secrets.SF_ORG_URL }} # Environment secret
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CURRENT_ENV: ${{ github.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up sf CLI
        uses: patrykacc/sf-cli-setup@v1.1.0
        with:
          version: latest

      - name: Authenticate to Dev Hub
        run: |
          echo "$DEVHUB_AUTH_URL" > devhub.authurl
          sf org login sfdx-url -f devhub.authurl -a DevHub --set-default-dev-hub
          rm devhub.authurl

      - name: Authenticate to Environment Org
        run: |
          # Debug environment name
          CURRENT_ENV="${{ github.environment }}"
          echo "Current environment: ${CURRENT_ENV:-staging}"

          # Set environment name with explicit fallback
          ENV_NAME="${CURRENT_ENV:-staging}"
          echo "Using environment: ${ENV_NAME}"

          # Authenticate
          echo "$SF_ORG_AUTH_URL" > env.authurl
          sf org login sfdx-url -f env.authurl -a "${ENV_NAME}" --set-default
          rm env.authurl

          # List org details with corrected JQ query
          echo "Environment org details:"
          sf org list --json | jq -r --arg env "$ENV_NAME" '.result[] | select(.aliases[0] == $env) | .username'

      - name: Get latest prerelease tag
        id: get-rc
        run: |
          LATEST_RC=$(gh api /repos/${{ github.repository }}/releases \
            --jq 'map(select(.prerelease))|sort_by(.created_at)|reverse|.[0].tag_name')
          echo "LATEST_RC=$LATEST_RC" >> $GITHUB_ENV

      - name: Create beta package version
        id: pkg
        run: |
          VERSION_ID=$(sf package version create \
            --package MyPackage@${{ env.LATEST_RC }} \
            --installationkeybypass --wait 10 --json \
            | jq -r .result.Id)
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_ENV

      - name: Promote package version
        run: sf package version promote \
          --package-version-id ${{ env.VERSION_ID }} \
          --noprompt

      - name: Install package into target org
        run: |
          sf package install \
            --package ${{ env.VERSION_ID }} \
            --target-org ${{ github.environment }} \
            --wait 10

      - name: Run Apex tests
        run: |
          sf apex run test --target-org ${{ github.environment }}
