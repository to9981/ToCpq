# .github/workflows/package-and-install.yml
name: Package and Install
on:
  workflow_run:
    workflows: ["Gather Release Tags"]
    types: [completed]

permissions:
  contents: write

jobs:
  package-and-install:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: staging
    runs-on: ubuntu-latest
    env:
      DEVHUB_AUTH_URL: ${{ secrets.DEVHUB_AUTH_URL }}
      SF_ORG_AUTH_URL: ${{ secrets.SF_ORG_URL }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ORG_ALIAS: ${{ github.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up sf CLI
        uses: patrykacc/sf-cli-setup@v1.1.0
        with:
          version: latest

      - name: Authenticate to Dev Hub
        run: |
          echo "$DEVHUB_AUTH_URL" > devhub.authurl
          sf org login sfdx-url -f devhub.authurl -a DevHub --set-default-dev-hub
          rm devhub.authurl

      - name: Authenticate to Environment Org
        run: |
          echo "$SF_ORG_AUTH_URL" > org.authurl
          sf org login sfdx-url -f org.authurl -a $ORG_ALIAS --set-default
          rm org.authurl

      - name: Get latest prerelease tag
        id: get-rc
        run: |
          LATEST_RC=$(gh api /repos/${{ github.repository }}/releases \
            --jq 'map(select(.prerelease))|sort_by(.created_at)|reverse|.[0].tag_name')
          echo "LATEST_RC=$LATEST_RC" >> $GITHUB_ENV

      - name: Create beta package version
        id: pkg
        run: |
          echo "Latest RC tag: ${{ env.LATEST_RC }}"

          # Verify DevHub status
          echo "Verifying DevHub setup..."
          DEVHUB_STATUS=$(sf org list --json | jq -r '.result.devHubs[] | select(.isDefaultDevHubUsername == true) | .username')
          if [ -z "$DEVHUB_STATUS" ]; then
            echo "Error: No default DevHub configured"
            echo "Available orgs:"
            sf org list --json | jq '.'
            exit 1
          fi
          echo "Using DevHub: $DEVHUB_STATUS"

          # Enable DevHub features if needed
          echo "Enabling DevHub features..."
          sf org enable devhub --target-org DevHub || true

          # Create package with error handling
          echo "Creating package..."
          CREATE_RESULT=$(sf package create \
            --name "MyPackage" \
            --package-type "Managed" \
            --description "My Package Description" \
            --path "force-app" \
            --no-namespace \
            --target-dev-hub DevHub \
            --json || echo '{"status": 1, "message": "Package creation failed"}')

          echo "Create result:"
          echo "$CREATE_RESULT" | jq '.'

          # Check if package exists or was created
          echo "Checking package list..."
          PACKAGE_LIST=$(sf package list --verbose --target-dev-hub DevHub --json)
          echo "Available packages:"
          echo "$PACKAGE_LIST" | jq '.'

          # Get package ID
          PACKAGE_ID=$(echo "$PACKAGE_LIST" | jq -r '.result[0].Id')
          if [ -z "$PACKAGE_ID" ] || [ "$PACKAGE_ID" = "null" ]; then
            echo "Error: Package ID not found"
            exit 1
          fi

          echo "Package ID: ${PACKAGE_ID}"

          # Create version with corrected format
          echo "Creating package version..."
          VERSION_NUMBER=$(echo "${{ env.LATEST_RC }}" | sed 's/v//')  # Remove 'v' prefix
          CREATION_RESULT=$(sf package version create \
            --package "${PACKAGE_ID}" \
            --version-number "${VERSION_NUMBER}" \
            --installation-key-bypass \
            --wait 10 \
            --json)

          echo "Creation result:"
          echo "${CREATION_RESULT}" | jq '.'

          VERSION_ID=$(echo "${CREATION_RESULT}" | jq -r '.result.SubscriberPackageVersionId')
          if [ -z "$VERSION_ID" ] || [ "$VERSION_ID" = "null" ]; then
            echo "Error: Failed to get package version ID"
            exit 1
          fi

          echo "VERSION_ID=${VERSION_ID}" >> $GITHUB_ENV

      - name: Promote package version
        if: env.VERSION_ID && env.VERSION_ID != 'null'
        run: |
          sf package version promote \
            --package-version-id $VERSION_ID \
            --noprompt

      - name: Install package into target org
        run: |
          sf package install \
            --package $VERSION_ID \
            --target-org $ORG_ALIAS \
            --wait 10

      - name: Run Apex tests
        run: |
          sf apex run test --target-org $ORG_ALIAS
