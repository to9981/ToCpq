name: CICD Delta Change Detection 

on: 
  workflow_dispatch: 
    inputs: 
      environment: 
        description: Select the target org 
        required: true 
        type: choice 
        options: 
          - ToCpq 
          - bar 
          - baz 

jobs: 
  build: 
    runs-on: ubuntu-latest 
    
    steps: 
      - name: Check out repository 
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0 

      - name: Set up Node 
        uses: actions/setup-node@v4
        with: 
          node-version: "18"

      - name: Set up SF CLI 
        uses: sfdx-actions/setup-sfdx@v1
        with: 
          sfdx-auth-url: ${{ secrets.ORG_URL }}

      - name: Install sfdx-git-delta
        run: |
          echo 'y' | sf plugins install sfdx-git-delta
        
      - name: Generate delta 
        run: | 
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*' 
          git fetch --all 
          mkdir -p .sgd-output 
          sf sgd source delta --to "HEAD" --from "HEAD~1" --output-dir .sgd-output 
          cat .sgd-output/package/package.xml  

      - name: Deploy delta 
        run: | 
          # Check if package.xml has content beyond just the version
          if grep -q "<types>" .sgd-output/package/package.xml; then
            # Deploy package changes
            sf project deploy preview \
              --manifest .sgd-output/package/package.xml \
              --target-org ${{ github.event.inputs.environment }}
            
            sf project deploy start \
              --manifest .sgd-output/package/package.xml \
              --target-org ${{ github.event.inputs.environment }}
            
            # Check and deploy destructive changes if they exist
            if [ -f ".sgd-output/destructiveChanges/destructiveChanges.xml" ] && grep -q "<types>" .sgd-output/destructiveChanges/destructiveChanges.xml; then
              echo "Deploying destructive changes..."
              sf project deploy start \
                --manifest .sgd-output/destructiveChanges/package.xml \
                --destructive-changes .sgd-output/destructiveChanges/destructiveChanges.xml \
                --target-org ${{ github.event.inputs.environment }}
            else
              echo "No destructive changes to deploy"
            fi
          else
            echo "No changes to deploy in package.xml"
          fi
